// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace METHConverter.Templates
{
    using CommonLib.DlkSystem;
    using CommonLib.DlkHandlers;
    using CommonLib.DlkRecords;
    using System.Text;
    using System.Collections.Generic;
    using System.Reflection;
    using METHConverter.Utilities;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class CPTemplate : CPTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(@"using System;
using System.Threading.Tasks;
using SeleniumCostpoint.Common;
using System.Collections.Generic;
using Core.Sys;
using Core.Sys.Selenium;
using System.Threading;
using System.Linq;
using OpenQA.Selenium;

namespace SeleniumCostpoint.Tests
{
    public class ");
            
            #line 24 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TestName));
            
            #line default
            #line hidden
            this.Write(@" : SeleniumTestScript
    {
        public override bool TestExecute(out string ErrorMessage, string TestEnvironment, IDriver Driver)
        {
			bool ret = true;
			ErrorMessage = string.Empty;
			SeleniumDriver sDriver = Driver as SeleniumDriver;
			Functions Function = new Functions(sDriver, this);

			try
			{
				Function.Login( TestEnvironment, out ErrorMessage);
				");
            
            #line 36 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"

					DlkEnvironment.mDirObjectStore = ObjectStorePath;
					DlkDynamicObjectStoreHandler.Initialize(true);

					foreach(DlkTestStepRecord step in TestSteps)
					{
						DlkObjectStoreFileControlRecord osRec;
						string actions = String.Empty;
						string[] Params = step.mParameters[0].Split(new[] { DlkTestStepRecord.globalParamDelimiter, "|" }, StringSplitOptions.None);
						step.mParameters.Clear();
						step.mParameters.AddRange(new List<String>(Params));

						if(step.mScreen != "Function")
						{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\ttry {\r\n\t\t\t\tFunction.CurrentComponent = \"");
            
            #line 52 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mScreen));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t\t");
            
            #line 53 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"


							if(String.IsNullOrEmpty(step.mControl))
							{
								//Special functions (ie. DlkDialog, DlkQuery)
								actions = GetFunction(TestName, step.mKeyword, step.mParameters, step.mScreen);
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 60 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(actions));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 61 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"

							}
							else
							{
								osRec = DlkDynamicObjectStoreHandler.GetControlRecord(step.mScreen, step.mControl);
								step.mControl =  ConvertControlToValidVariable(step.mControl);
								actions = GetAction(TestName, step.mScreen + "_" + step.mControl, osRec.mControlType, step.mKeyword, step.mParameters);								
								string isMessageArea = osRec.mControlType.ToLower() == "messagearea" ? "true" : "false";
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\tFunction.WaitLoadingFinished(Function.IsCurrentComponentModal(");
            
            #line 70 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isMessageArea));
            
            #line default
            #line hidden
            this.Write("));\r\n\r\n\t\t\t\tthis.ScriptLogger.WriteLine(\"[");
            
            #line 72 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mScreen));
            
            #line default
            #line hidden
            this.Write("] Performing ");
            
            #line 72 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mKeyword));
            
            #line default
            #line hidden
            this.Write(" on ");
            
            #line 72 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mControl));
            
            #line default
            #line hidden
            this.Write("...\", Logger.MessageType.INF);\r\n\t\t\t\tSeleniumControl ");
            
            #line 73 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mScreen));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 73 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mControl));
            
            #line default
            #line hidden
            this.Write(" = new SeleniumControl( sDriver, \"");
            
            #line 73 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mControl));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 73 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(osRec.mSearchMethod));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 73 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(osRec.mSearchParameters));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\t\t");
            
            #line 74 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(actions));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 75 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"

							}
						}
						else
						{
							actions = GetFunction(TestName, step.mKeyword, step.mParameters);
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t");
            
            #line 84 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(actions));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 85 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"

						if(step.mStepDelay > 0)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tThread.Sleep(");
            
            #line 89 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mStepDelay));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\t");
            
            #line 90 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"

						}
					}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t}\r\n\t\t\t\tcatch(Exception ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new Exception(TraceMessage(\"Err" +
                    "or performing [");
            
            #line 97 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(step.mKeyword));
            
            #line default
            #line hidden
            this.Write("]\" , ex.Message));\r\n\t\t\t\t}\r\n\t\t\t\t");
            
            #line 99 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"

					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tret = false;\r\n\t\t\t\tErrorMessage = ex.Mess" +
                    "age;\r\n\t\t\t\tthrow new Exception(ex.Message);\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n        }\r\n   " +
                    " }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 114 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"


public string GetAction(string TestName, string Control, string ControlType, string Keyword, List<string> Parameters)
{
	StringBuilder actions = new StringBuilder(String.Empty);
	if(Keyword.Equals("VerifyExists") || Keyword.Equals("VerifyExist"))
	{
		string Expected = Convert.ToBoolean(Parameters[0]).ToString().ToLower(); // Just checking if parameter is boolean
		actions.Append("Function.AssertEqual(").Append(Expected).Append(",").Append(Control).AppendLine(".Exists());");
	}
	else if(Keyword.Equals("VerifyReadOnly"))
	{
		actions.Append("Function.AssertEqual(\"").Append(Parameters[0].ToLower()).Append("\",").Append(Control).AppendLine(".IsReadOnly().ToLower());");
	}
	else
	{
		try
		{
			Type type = GetType(ControlType);
			if(type == null) 
				{
					actions.AppendLine(String.Format("//TODO:: Auto-generated code for ControlType:{0} - Keyword:{1} is unavailable.", ControlType, Keyword));
					actions.AppendLine("//Write your own code here...");
					MainWindow.failCount++;
					MainWindow.RunLogs.WriteLine(String.Format("{0}: No existing conversion for keyword [{1}] for controltype [{2}].", TestName, Keyword, ControlType),  Logger.MessageType.WRN);
				}
				else{
					Object instance = GetInstance(type);
					MethodInfo func = type.GetMethod(Keyword);

					if (instance == null || func == null) 
						{
						actions.AppendLine(String.Format("//TODO:: Auto-generated code for ControlType:{0} - Keyword:{1} is unavailable.", ControlType, Keyword));
						actions.AppendLine("//Write your own code here...");
						MainWindow.failCount++;
						MainWindow.RunLogs.WriteLine(String.Format("{0}: No existing conversion for keyword [{1}] for controltype [{2}].", TestName, Keyword, ControlType),  Logger.MessageType.WRN);
						}
					else{
					switch(Parameters.Count)
						{
						case 1:
							if(Parameters[0] == "")
							{
								try
								{
									actions.AppendLine((String)func.Invoke(instance, new []{Control}));
								}
								catch
								{
									actions.AppendLine((String)func.Invoke(instance, new []{Control, Parameters[0]}));
								}
							}
							else
							{
								actions.AppendLine((String)func.Invoke(instance, new []{Control, Parameters[0]}));
							}				
							break;
						case 2:
							actions.AppendLine((String)func.Invoke(instance, new []{Control, Parameters[0], Parameters[1]}));
							break;
						case 3:
							actions.AppendLine((String)func.Invoke(instance, new []{Control, Parameters[0], Parameters[1], Parameters[2]}));
							break;
						}
					}						
				}
		}
		catch (Exception e)
		{
			throw new Exception(e.Message);
		}
	}
	return actions.ToString();
}

public string GetFunction(string TestName, string Function, List<string> Parameters, string SpecialControl = "")
{
	StringBuilder actions = new StringBuilder(string.Empty);

	try
	{
		Type type;
		if(String.IsNullOrEmpty(SpecialControl))
		{
			type = GetType("Functions");
		}
		else
		{
			type = GetType(SpecialControl);
		}

		Object instance = GetInstance(type);
		MethodInfo func = type.GetMethod(Function);

		if (instance == null || func==null) {
			actions.AppendLine(String.Format("//TODO:: Auto-generated code for {0} is unavailable.", Function));
			actions.AppendLine("//Write your own code here...");
			MainWindow.failCount++;
			MainWindow.RunLogs.WriteLine(String.Format("{0}: No existing conversion for Function [{1}].", TestName, Function),  Logger.MessageType.WRN);
			}
		else{
			switch(Parameters.Count)
			{
				case 1:
					if(Parameters[0] == "")
					{
						try
						{
							actions.AppendLine((String)func.Invoke(instance, null));
						}
						catch
						{
							actions.AppendLine((String)func.Invoke(instance, new []{Parameters[0]}));
						}
					}
					else
					{
						actions.AppendLine((String)func.Invoke(instance, new []{Parameters[0]}));
					}				
					break;
				case 2:
					actions.AppendLine((String)func.Invoke(instance, new []{Parameters[0], Parameters[1]}));
					break;
				case 3:
					actions.AppendLine((String)func.Invoke(instance, new []{Parameters[0], Parameters[1], Parameters[2]}));
					break;
				case 4:
					actions.AppendLine((String)func.Invoke(instance, new []{Parameters[0], Parameters[1], Parameters[2], Parameters[3]}));
					break;
			}
		}
	}
	catch(Exception e)
	{
		throw new Exception(e.Message);
	}
	return actions.ToString();
}

static object GetInstance(Type type)
{
    object ret = null;
    ret = Activator.CreateInstance(type);
    return ret;
}

static Type GetType(string ControlType)
{
    Type ret = null;

    foreach (Type typ in Assembly.GetExecutingAssembly().GetTypes())
    {
        if (typ.Name.ToLower() == ControlType.ToLower())
        {
            ret = typ;
            break;
        }
    }
    return ret;
}

public DlkDynamicObjectStoreHandler DlkDynamicObjectStoreHandler
{
    get { return DlkDynamicObjectStoreHandler.Instance; }
}				

public string ConvertControlToValidVariable(string ControlName)
{
	System.CodeDom.Compiler.CodeDomProvider provider = System.CodeDom.Compiler.CodeDomProvider.CreateProvider("C#");
	ControlName = ControlName.Trim();
	ControlName = ControlName.Replace(" ", "");

	if (provider.IsValidIdentifier (ControlName)) 
	{
	      return ControlName;
	} 
	else 
	{
		return  System.Text.RegularExpressions.Regex.Replace(ControlName, @"[^a-zA-Z0-9_]", "");
	}
}

        
        #line default
        #line hidden
        
        #line 1 "C:\TFS\QEAutomation\Selenium\BrowserFramework\Code\BrowserFramework\METHConverter\Templates\CPTemplate.tt"

private string _TestNameField;

/// <summary>
/// Access the TestName parameter of the template.
/// </summary>
private string TestName
{
    get
    {
        return this._TestNameField;
    }
}

private global::System.Collections.Generic.List<DlkTestStepRecord> _TestStepsField;

/// <summary>
/// Access the TestSteps parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<DlkTestStepRecord> TestSteps
{
    get
    {
        return this._TestStepsField;
    }
}

private string _ObjectStorePathField;

/// <summary>
/// Access the ObjectStorePath parameter of the template.
/// </summary>
private string ObjectStorePath
{
    get
    {
        return this._ObjectStorePathField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool TestNameValueAcquired = false;
if (this.Session.ContainsKey("TestName"))
{
    this._TestNameField = ((string)(this.Session["TestName"]));
    TestNameValueAcquired = true;
}
if ((TestNameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "TestName");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._TestNameField = ((string)(tc.ConvertFrom(parameterValue)));
            TestNameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'TestName\' did not match the type of th" +
                    "e data passed to the template.");
        }
    }
}
if ((TestNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TestName");
    if ((data != null))
    {
        this._TestNameField = ((string)(data));
    }
}
bool TestStepsValueAcquired = false;
if (this.Session.ContainsKey("TestSteps"))
{
    this._TestStepsField = ((global::System.Collections.Generic.List<DlkTestStepRecord>)(this.Session["TestSteps"]));
    TestStepsValueAcquired = true;
}
if ((TestStepsValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "TestSteps");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::System.Collections.Generic.List<DlkTestStepRecord>));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._TestStepsField = ((global::System.Collections.Generic.List<DlkTestStepRecord>)(tc.ConvertFrom(parameterValue)));
            TestStepsValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Collections.Generic.List<DlkTestStepRecord>\' of the parameter \'T" +
                    "estSteps\' did not match the type of the data passed to the template.");
        }
    }
}
if ((TestStepsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TestSteps");
    if ((data != null))
    {
        this._TestStepsField = ((global::System.Collections.Generic.List<DlkTestStepRecord>)(data));
    }
}
bool ObjectStorePathValueAcquired = false;
if (this.Session.ContainsKey("ObjectStorePath"))
{
    this._ObjectStorePathField = ((string)(this.Session["ObjectStorePath"]));
    ObjectStorePathValueAcquired = true;
}
if ((ObjectStorePathValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "ObjectStorePath");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._ObjectStorePathField = ((string)(tc.ConvertFrom(parameterValue)));
            ObjectStorePathValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'ObjectStorePath\' did not match the typ" +
                    "e of the data passed to the template.");
        }
    }
}
if ((ObjectStorePathValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ObjectStorePath");
    if ((data != null))
    {
        this._ObjectStorePathField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class CPTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
