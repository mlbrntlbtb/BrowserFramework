<Window x:Class="TestRunner.AdvancedScheduler.SuiteEditorForm"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:common="clr-namespace:TestRunner.Common"
        xmlns:tr="clr-namespace:TestRunner"
        Title="SuiteEditorForm" Height="720" Width="1280" Loaded="Window_Loaded" Closing="Window_Closing" WindowStartupLocation="CenterScreen">
    <Window.Resources>
        <common:DlkStringToBoolean x:Key="stringtobool" />
        <common:DlkStringHasValueToBoolean x:Key="stringhasvaluetobool" />
        <common:DlkTruncateString x:Key="truncatestring" />
        <tr:DlkStepNumberConverter x:Key="snc" />
        <tr:DlkScreenConverter x:Key="scc" />
        <tr:DlkExecuteConverter x:Key="exc" />
        <Style x:Name="ExecuteColumnStyle" x:Key="ExecuteColumnStyle" TargetType="ComboBoxItem">
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="FontStyle" Value="Normal"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding}" Value="Set condition...">
                    <Setter Property="FontStyle" Value="Italic"/>
                    <Setter Property="Foreground" Value="Gray"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid x:Name="gridMain" HorizontalAlignment="Stretch">
        <Grid.Background>
            <ImageBrush ImageSource="pack://siteoforigin:,,,/Resources/DeltekBackground.png" Stretch="UniformToFill"/>
        </Grid.Background>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="290" MinWidth="290" MaxWidth="685"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="25" />
            <RowDefinition Height="145" />
            <RowDefinition />
            <RowDefinition Height="25"/>
        </Grid.RowDefinitions>

        <Menu Grid.Row="0" Name="mnuMain">
            <Menu.Style>
                <Style TargetType="Menu">
                    <Setter Property="IsEnabled" Value="True"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsBackgroundProcessInProgress, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="true">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Menu.Style>
            <Menu.Background>
                <SolidColorBrush />
            </Menu.Background>
            <MenuItem Header="File">
                <MenuItem Header="Save" Click="Form_Save"/>
                <MenuItem Header="Close" Click="Form_Close"/>
            </MenuItem>
        </Menu>

        <TabControl Margin="5,0,0,0" x:Name="tabControlTestType" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" 
                    Grid.Column="0" Grid.Row="1" Grid.RowSpan="2" Background="#FF90D2FF">
            <TabControl.Style>
                <Style TargetType="TabControl">
                    <Setter Property="IsEnabled" Value="True"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsBackgroundProcessInProgress, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="true">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TabControl.Style>
            <TabItem Header="Test Explorer" x:Name="tabKeyword" Background="#FF90D2FF" Visibility="Collapsed">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="90"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="27"/>
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0">
                        <Grid Background="#FF828790" Margin="0,0,0,0">
                            <DockPanel DockPanel.Dock="Top" Background="#FF90D2FF" Margin="1,1,1,1">
                                <Label x:Name="lblKwRootFolder" Content="Test Directory" Margin="6,0,0,0" Width="100" HorizontalAlignment="Left" />
                                <Button x:Name="btnFilter" Style="{StaticResource ToolbarButtonStyle}" Width="20"  Height="20" Click="btnFilter_Click" DockPanel.Dock="Right" HorizontalAlignment="Right" ToolTip="Filter">
                                    <Image Source="pack://siteoforigin:,,,/Resources/filter.png" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                                </Button>
                            </DockPanel>
                        </Grid>
                        <TextBox x:Name="txtKwRootFolder" Margin="0,-1,0,0" IsReadOnly="True" IsEnabled="False" ToolTipService.ShowOnDisabled="True" Height="59" TextWrapping="Wrap">
                            <TextBox.BorderBrush>
                                <LinearGradientBrush EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
                                    <GradientStop Color="#FFABADB3" Offset="0.05"/>
                                    <GradientStop Color="#FFE2E3EA" Offset="0.07"/>
                                    <GradientStop Color="#FF828790" Offset="1"/>
                                </LinearGradientBrush>
                            </TextBox.BorderBrush>
                        </TextBox>
                    </StackPanel>
                    <DockPanel Grid.Row="1">
                        <Grid DockPanel.Dock="Top" Background="#FF828790" Margin="0,0,0,0">
                            <DockPanel Background="#FF90D2FF" Margin="1,1,1,1">
                                <ToggleButton x:Name="btnTestDirSettings" Style="{StaticResource ExpandCollapseStyle}" Width="25" Height="25" Margin="0,0,0,0" HorizontalAlignment="Left" DockPanel.Dock="Left" Click="btnTestDirSettings_Click" />
                                <Label x:Name="lblKwTestNames" Content="Test Explorer" HorizontalAlignment="Left" Margin="-7,0,0,0" ToolTip="CTRL+Click to select multiple tests"/>
                                <Menu x:Name="mnuSearchTypes" Background="Transparent" Height="20" Width="20" Margin="-4,0,0,0" DockPanel.Dock="Right">
                                    <MenuItem x:Name="btnSetSearchType" Click="btnSetSearchType_Click" VerticalAlignment="Center" Margin="-1" ToolTip="Search Options">
                                        <MenuItem.Icon>
                                            <Image Source="pack://siteoforigin:,,,/Resources/bullet_arrow_down.png"  Height="35"/>
                                        </MenuItem.Icon>
                                        <MenuItem.ContextMenu>
                                            <ContextMenu x:Name="cmnuSearchTypes"/>
                                        </MenuItem.ContextMenu>
                                    </MenuItem>
                                </Menu>
                                <GridSplitter BorderBrush="Gray" BorderThickness="0,0,0.6,0" Opacity="0.4" Margin="0" Height="15" Foreground="Black" DockPanel.Dock="Right" HorizontalAlignment="Left"/>
                                <Button x:Name="btnSearchTest" Style="{StaticResource ToolbarButtonStyle}" Width="20"  Height="20" Margin="0,0,2,0" Click="btnSearchTest_Click"  DockPanel.Dock="Right" HorizontalAlignment="Right" ToolTip="Search" >
                                    <Image Source="pack://siteoforigin:,,,/Resources/find.png" Height="11" Width="11"/>
                                </Button>
                                <Button x:Name="btnSyncSelected" Style="{StaticResource ToolbarButtonStyle}" Width="20" Height="20" HorizontalAlignment="Right" Margin="0,0,3,0" ToolTip="Refresh" DockPanel.Dock="Right" Click="btnSyncSelected_Click">
                                    <Image Source="pack://siteoforigin:,,,/Resources/refresh.png" Height="11" Width="11"/>
                                </Button>
                                <Button x:Name="btnDeleteTest" Style="{StaticResource ToolbarButtonStyle}" Width="20"  Height="20" Click="btnDeleteTest_Click" Margin="0,0,2,0" DockPanel.Dock="Right" HorizontalAlignment="Right" ToolTip="Delete" >
                                    <Image Source="pack://siteoforigin:,,,/Resources/delete.png" Height="11" Width="11"/>
                                </Button>
                                <Button x:Name="btnAddFolder" Style="{StaticResource ToolbarButtonStyle}" Width="20"  Height="20" Click="btnAddFolder_Click" Margin="0,0,2,0" DockPanel.Dock="Right" HorizontalAlignment="Right" ToolTip="Add Folder">
                                    <Image Source="pack://siteoforigin:,,,/Resources/add_folder.png"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                                </Button>
                            </DockPanel>
                        </Grid>
                        <Grid x:Name="grdSearchGrid" DockPanel.Dock="Top" Background="Gray" Visibility="Collapsed">
                            <TextBox x:Name="txtSearch" Margin="1,0,1,0" Background="LemonChiffon" KeyUp="txtSearch_KeyUp"></TextBox>
                        </Grid>
                        <TreeView x:Name="tvKeywordDirectory" Margin="0,-1,0,0" Height="Auto" VerticalAlignment="Stretch" ItemsSource="{Binding}" SelectedItemChanged="tvKeywordDirectory_SelectedItemChanged"
                                  TreeViewItem.Selected="GetSelectedItem">
                            <TreeView.ItemContainerStyle>
                                <Style x:Name="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">
                                    <Setter Property="IsExpanded" Value="{Binding Path=IsTestTreeExpanded, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, UpdateSourceTrigger=PropertyChanged}"/>
                                    <EventSetter Event="TreeViewItem.MouseMove" Handler="tvKeywordDirectoryItem_MouseMove" />
                                </Style>
                            </TreeView.ItemContainerStyle>
                            <TreeView.Resources>
                                <HierarchicalDataTemplate DataType="{x:Type common:KwFolder}" ItemsSource="{Binding DirItems}">
                                    <StackPanel Orientation="Horizontal">
                                        <Image Source="{Binding Icon}" VerticalAlignment="Stretch" Width="16" Height="16"/>
                                        <TextBlock Text="{Binding Name}" ToolTip="{Binding Path}" Margin="3,0,0,0"/>
                                    </StackPanel>
                                </HierarchicalDataTemplate>
                                <HierarchicalDataTemplate DataType="{x:Type common:KwFile}" ItemsSource="{Binding DirItems}">
                                    <StackPanel Orientation="Horizontal">
                                        <Image Source="{Binding Icon}" VerticalAlignment="Stretch" Width="15" Height="13"/>
                                        <TextBlock Text="{Binding Name}" ToolTip="{Binding Path}" Margin="3,0,0,0"/>
                                    </StackPanel>
                                </HierarchicalDataTemplate>
                                <DataTemplate DataType="{x:Type common:KwInstance}">
                                    <StackPanel Orientation="Horizontal">
                                        <Image Source="{Binding Icon}" VerticalAlignment="Stretch" Width="15" Height="13"/>
                                        <TextBlock Text="{Binding Name}" Margin="3,0,0,0"/>
                                    </StackPanel>
                                </DataTemplate>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                                                 Color="DodgerBlue" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
                                                 Color="White" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                                                 Color="DodgerBlue" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"
                                                 Color="White" />
                            </TreeView.Resources>
                        </TreeView>
                    </DockPanel>
                    <DockPanel Grid.Row="2">
                        <Button x:Name="btnKwTestImport" Content="Import" Style="{StaticResource ButtonStyle2}" DockPanel.Dock="Left" Click="btnKwTestImport_Click"/>
                        <StackPanel DockPanel.Dock="Right" HorizontalAlignment="Right" Orientation="Horizontal" VerticalAlignment="Bottom" Margin="0,0,4,0">
                            <Button x:Name="btnKwTestNew" Content="New" Style="{StaticResource ButtonStyle2}" Click="btnKwTestNew_Click"/>
                            <Button x:Name="btnKwTestEditor" Content="Edit" Style="{StaticResource ButtonStyle2}" Click="btnKwTestEditor_Click"/>
                            <Button x:Name="btnKwQueue" ToolTip="Add/insert test to queue" Click="btnKwQueue_Click" Style="{StaticResource ButtonStyle2}" IsEnabled="False" Width="65">
                                <DockPanel>
                                    <TextBlock x:Name="tbKwQueue" Text="Queue" Width="29" TextAlignment="Center" Margin="5,0,10,0" DockPanel.Dock="Left"/>
                                    <GridSplitter BorderBrush="White" BorderThickness="0,0,1,0" Opacity="0.8" Margin="0,0,0,0" Foreground="White"/>
                                    <Button Name="btnQueueType" HorizontalAlignment="Right" DockPanel.Dock="Right" Margin="0,0,-2,0" Width="15" Height="15" Style="{StaticResource ButtonTransparentStyle}"  ContextMenu="{StaticResource ctxQueueType}" ContextMenuService.IsEnabled="false" FontSize="8" Click="ShowQueueContextMenu">
                                        <Image Source="pack://siteoforigin:,,,/Resources/bullet_arrow_down.png"  Height="20"/>
                                    </Button>
                                </DockPanel>
                            </Button>
                        </StackPanel>
                    </DockPanel>
                </Grid>
            </TabItem>
        </TabControl>

        <GridSplitter x:Name="gridSplitter" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" ShowsPreview="False" Width="Auto" BorderBrush="Gray"  VerticalAlignment="Stretch" 
                                          BorderThickness="0,0,0,1" HorizontalAlignment="Stretch" Opacity="0" />

        <TabControl Grid.Column="2" Margin="0,0,12,0" Grid.Row="1" Background="Transparent">
            <TabControl.Style>
                <Style TargetType="TabControl">
                    <Setter Property="IsEnabled" Value="True"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsBackgroundProcessInProgress, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="true">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TabControl.Style>
            <TabItem Visibility="Collapsed">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30" />
                        <RowDefinition />
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="15"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" >
                        <!--<Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="250" />
                        </Grid.ColumnDefinitions>-->
                        <Grid Grid.Column="0">
                            <DockPanel VerticalAlignment="Top" Width="Auto" Height="30" Margin="0,0,4,0" Grid.Row="0" HorizontalAlignment="Stretch" LastChildFill="True">
                                <Label x:Name="lblSuitePath" Content="Suite:" Width="75" VerticalAlignment="Center" HorizontalAlignment="Left" DockPanel.Dock="Left" />
                                <TextBox x:Name="txtSuitePath" HorizontalAlignment="Stretch" VerticalAlignment="Center" DockPanel.Dock="Left" IsEnabled="False" ToolTipService.ShowOnDisabled="True" 
                                          Text="{Binding Path=LoadedSuite, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
                            </DockPanel>
                        </Grid>
                        <!--<Grid Grid.Column="1" HorizontalAlignment="Right">
                            <DockPanel VerticalAlignment="Top" Height="30" Margin="0,0,4,0" DockPanel.Dock="Right" HorizontalAlignment="Left">
                                <Label x:Name="lblExecutionDate" Content="Execution Date:" VerticalAlignment="Center" />
                                <TextBox x:Name="txtExecutionDate" Width="148" VerticalAlignment="Center" IsEnabled="False" IsReadOnly="True" HorizontalAlignment="Left"/>
                            </DockPanel>
                        </Grid>-->
                    </Grid>
                    <DockPanel VerticalAlignment="Top" Width="Auto" Margin="0,0,4,0" Grid.Row="1" HorizontalAlignment="Stretch" LastChildFill="True">
                        <Label x:Name="lblDescription" Content="Description:" Width="75" VerticalAlignment="Top" />
                        <TextBox x:Name="txtDescription" HorizontalAlignment="Stretch" Height="55" VerticalScrollBarVisibility="Auto" BorderBrush="Silver" ToolTipService.ShowOnDisabled="True" TextWrapping="Wrap" AcceptsReturn="True" GotFocus="TextBox_DescriptionGotFocus" TextChanged="TextBox_DescriptionTextChanged"/>
                    </DockPanel>
                    <DockPanel VerticalAlignment="Center" Margin="0,0,4,0" Grid.Row="2" HorizontalAlignment="Stretch" LastChildFill="True">
                        <Label x:Name="lblOwner" Content="Owner:" Width="75" VerticalAlignment="Center" />
                        <TextBox x:Name="txtOwner" VerticalAlignment="Center" HorizontalAlignment="Stretch" BorderBrush="Silver" GotFocus="TextBox_OwnerGotFocus" TextChanged="TextBox_OwnerTextChanged"/>
                    </DockPanel>
                    <DockPanel Grid.Row="3" VerticalAlignment="Top" Margin="0,-2,7,0" LastChildFill="True">
                        <TextBlock HorizontalAlignment="Right" Margin="0,0,5,0" DockPanel.Dock="Right">
                                <Hyperlink x:Name="lnkManageLink" Click="lnkManageLink_Click">
                                    <Hyperlink.Style>
                                        <Style TargetType="Hyperlink">
                                            <Setter Property="IsEnabled" Value="False"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=IsSuiteLoaded, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="true">
                                                    <Setter Property="IsEnabled" Value="True"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Hyperlink.Style>
                                    Links
                                </Hyperlink>
                        </TextBlock>
                        <TextBlock HorizontalAlignment="Right" Margin="0,0,25,0" DockPanel.Dock="Right">
                            <Hyperlink x:Name="lnkManageTag" Click="lnkManageTagLink_Click">
                                <Hyperlink.Style>
                                    <Style TargetType="Hyperlink">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsSuiteLoaded, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="true">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Hyperlink.Style>
                                Tags
                            </Hyperlink>
                        </TextBlock>
                    </DockPanel>
                </Grid>
            </TabItem>
        </TabControl>

        <DockPanel x:Name="CenterStack" Margin="0,12,12,0" Grid.Column="2" Grid.Row="2" VerticalAlignment="Stretch">
            <DockPanel.Style>
                <Style TargetType="DockPanel">
                    <Setter Property="IsEnabled" Value="True"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsBackgroundProcessInProgress, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="true">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Style>
            <DockPanel VerticalAlignment="Stretch" HorizontalAlignment="Left" DockPanel.Dock="Top">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>

                    <ToolBar Grid.Row="0" VerticalAlignment="Stretch" Margin="0,0,0,0" BorderBrush="Silver" BorderThickness="1" ToolBarTray.IsLocked="True" Loaded="ToolBar_Loaded">
                        <Button x:Name="btnMoveTestUpInQueue" Margin="5,1,0,0" Style="{StaticResource ToolbarButtonStyle}" BorderBrush="Transparent" Click="btnMoveTestUpInQueue_Click" 
                                                    Height="22" Width="22" ToolTip="Move up">
                            <Image Source="pack://siteoforigin:,,,/Resources/bullet_arrow_up.png" Height="12" Width="14"/>
                        </Button>
                        <Button x:Name="btnMoveTestDownInQueue" Margin="3,1,0,0" Style="{StaticResource ToolbarButtonStyle}" BorderBrush="Transparent" Click="btnMoveTestDownInQueue_Click" 
                                                    Height="22" Width="22" ToolTip="Move down">
                            <Image Source="pack://siteoforigin:,,,/Resources/bullet_arrow_down.png" Height="12" Width="12"/>
                        </Button>
                        <Separator Margin="5,0">
                            <Separator.LayoutTransform>
                                <RotateTransform Angle="90" />
                            </Separator.LayoutTransform>
                        </Separator>
                        <Button x:Name="btnEditTestInQueue" Margin="0,1,0,0" Style="{StaticResource ToolbarButtonStyle}" Click="btnEditTestInQueue_Click" 
                                                    BorderBrush="Transparent" Height="22" Width="22" ToolTip="Edit">
                            <Image Source="pack://siteoforigin:,,,/Resources/edit.png" Height="12" Width="12"/>
                        </Button>
                        <Button x:Name="btnRemoveTestInQueue" Margin="0,1,0,0" Style="{StaticResource ToolbarButtonStyle}" Click="btnRemoveTestInQueue_Click" 
                                                    BorderBrush="Transparent" Height="22" Width="22" ToolTip="Delete">
                            <Image Source="pack://siteoforigin:,,,/Resources/button_cancel.ico" Height="12" Width="12"/>
                        </Button>
                        <Button x:Name="btnCopyTestInQueue" Margin="0,1,0,0" Style="{StaticResource ToolbarButtonStyle}" Click="btnCopyTestInQueue_Click" 
                                                    BorderBrush="Transparent" Height="22" Width="22" ToolTip="Copy">
                            <Image Source="pack://siteoforigin:,,,/Resources/copy.png" Height="12" Width="12"/>
                        </Button>
                        <Button x:Name="btnPasteTestToQueue" Margin="0,1,0,0" Style="{StaticResource ToolbarButtonStyle}" Click="btnPasteTestToQueue_Click" 
                                                    BorderBrush="Transparent" Height="22" Width="22" ToolTip="Paste">
                            <Image Source="pack://siteoforigin:,,,/Resources/paste.png" Height="12" Width="12"/>
                        </Button>
                    </ToolBar>

                    <TabControl Name="tabTests" Grid.Row="1" Margin="0,0,0,0" >
                        <TabItem Header="Tests" Visibility="Collapsed">
                            <Grid VerticalAlignment="Stretch">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <DataGrid HorizontalAlignment="Left" Grid.Row="0" x:Name="TestQueue" ItemsSource="{Binding}" RowHeaderWidth="0"
            	                    Style="{StaticResource DataGridStyle1}" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"
            	                    SelectionMode="Extended" IsReadOnly="False"
            	                    CanUserAddRows="False" CanUserDeleteRows="False"
            	                    SelectionChanged="TestQueue_SelectionChanged" RowStyle="{StaticResource DataGridRowStyle0}"
                                    DockPanel.Dock="Top" VirtualizingStackPanel.IsVirtualizing="True" VerticalAlignment="Stretch" CanUserResizeColumns="True"
                                          AllowDrop="True" Drop="dgTestLineup_Drop">
                                    <DataGrid.ContextMenu>
                                        <ContextMenu x:Name="TestQueue_ContextMenu">
                                            <ContextMenu.Style>
                                                <Style TargetType="ContextMenu">
                                                    <Setter Property="FontFamily" Value="Calibri"/>
                                                </Style>
                                            </ContextMenu.Style>
                                            <MenuItem Name="TestQueue_EditMenu" Header="Edit..." Click="TestQueue_EditMenu_Click"/>
                                        </ContextMenu>
                                    </DataGrid.ContextMenu>
                                    <DataGrid.CellStyle>
                                        <Style TargetType="{x:Type DataGridCell}">
                                            <Setter Property="Background" Value="White" />
                                            <Setter Property="Foreground" Value="Navy" />
                                            <!--<Style.Triggers>
                                                <DataTrigger Binding="{Binding teststatus}" Value="Not Run" >
                                                    <Setter Property="Background" Value="White" />
                                                    <Setter Property="Foreground" Value="Navy" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding teststatus}" Value="Passed" >
                                                    <Setter Property="Background" Value="LightGreen" />
                                                    <Setter Property="Foreground" Value="Navy" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding teststatus}" Value="Failed" >
                                                    <Setter Property="Background" Value="MistyRose" />
                                                    <Setter Property="Foreground" Value="Navy" />
                                                </DataTrigger>
                                            </Style.Triggers>-->
                                        </Style>
                                    </DataGrid.CellStyle>
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Binding="{Binding testrow}" CanUserSort="False" CanUserReorder="False" CanUserResize="True"  Header="#" HeaderStyle="{StaticResource DataGridColumnHeaderStyle0}" IsReadOnly="True" Width="25"/>
                                        <DataGridTemplateColumn x:Name="ExecuteColumn" CanUserSort="False" CanUserReorder="False" CanUserResize="True"  Header="Execute" HeaderStyle="{StaticResource DataGridColumnHeaderStyle1}" Width="75">
                                            <DataGridTemplateColumn.HeaderTemplate>
                                                <DataTemplate>
                                                    <DockPanel>
                                                        <TextBlock Text="Execute"/>
                                                        <Button Name="btnApplyExecute" HorizontalAlignment="Right" Margin="5,0,5,0" Width="20" Height="15" Content="&#9660;" ContextMenu="{StaticResource ctxExecute}" ContextMenuService.IsEnabled="false" FontSize="8" Click="ShowExecuteContextMenu" ToolTip="Apply to all"/>
                                                    </DockPanel>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.HeaderTemplate>
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <StackPanel Orientation="Horizontal">
                                                        <Label Content="{Binding execute}" Width="32" Height="23" VerticalContentAlignment="Center" HorizontalContentAlignment="Left">
                                                            <Label.Style>
                                                                <Style TargetType="Label">
                                                                    <Style.Triggers>
                                                                        <DataTrigger Binding="{Binding execute}" Value="False">
                                                                            <Setter Property="Foreground" Value="Silver"/>
                                                                        </DataTrigger>
                                                                        <DataTrigger Binding="{Binding dependent}" Value="True">
                                                                            <Setter Property="FontStyle" Value="Italic"/>
                                                                        </DataTrigger>
                                                                        <!--<DataTrigger Binding="{Binding teststatus}" Value="Not Run" >
                                                                            <Setter Property="Background" Value="White" />
                                                                            <Setter Property="Foreground" Value="Navy" />
                                                                        </DataTrigger>
                                                                        <DataTrigger Binding="{Binding teststatus}" Value="Passed" >
                                                                            <Setter Property="Background" Value="LightGreen" />
                                                                            <Setter Property="Foreground" Value="Navy" />
                                                                        </DataTrigger>
                                                                        <DataTrigger Binding="{Binding teststatus}" Value="Failed" >
                                                                            <Setter Property="Background" Value="MistyRose" />
                                                                            <Setter Property="Foreground" Value="Navy" />
                                                                        </DataTrigger>-->
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Label.Style>
                                                        </Label>
                                                        <StackPanel Orientation="Horizontal" VerticalAlignment="Top">
                                                            <Label x:Name="lblDependent" FontFamily="Arial Black">
                                                                <Label.Style>
                                                                    <Style TargetType="Label">
                                                                        <Setter Property="Visibility" Value="Hidden"/>
                                                                        <Style.Triggers>
                                                                            <DataTrigger Binding="{Binding dependent}" Value="True">
                                                                                <Setter Property="Visibility" Value="Visible"/>
                                                                                <Setter Property="Content" Value="{Binding executedependencytestrow}"/>
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding teststatus}" Value="Not Run" >
                                                                                <Setter Property="Background" Value="White" />
                                                                                <Setter Property="Foreground" Value="Navy" />
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding teststatus}" Value="Passed" >
                                                                                <Setter Property="Background" Value="LightGreen" />
                                                                                <Setter Property="Foreground" Value="Navy" />
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding teststatus}" Value="Failed" >
                                                                                <Setter Property="Background" Value="MistyRose" />
                                                                                <Setter Property="Foreground" Value="Navy" />
                                                                            </DataTrigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </Label.Style>
                                                            </Label>
                                                            <Rectangle Stroke="RoyalBlue" Height="10" Width="10" StrokeThickness="0.5" Margin="-3,0,0,0" VerticalAlignment="Center">
                                                                <Rectangle.Style>
                                                                    <Style TargetType="Rectangle">
                                                                        <Setter Property="Visibility" Value="Hidden"/>
                                                                        <Style.Triggers>
                                                                            <DataTrigger Binding="{Binding dependent}" Value="True">
                                                                                <Setter Property="Visibility" Value="Visible"/>
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding executedependencyresult}" Value="passed">
                                                                                <Setter Property="Fill" Value="LightGreen"/>
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding executedependencyresult}" Value="failed">
                                                                                <Setter Property="Fill" Value="MistyRose"/>
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding executedependencyresult}" Value="not run">
                                                                                <Setter Property="Fill" Value="White"/>
                                                                            </DataTrigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </Rectangle.Style>
                                                            </Rectangle>
                                                        </StackPanel>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <ComboBox x:Name="cboExecute" IsEditable="True" SelectedValue="{Binding execute, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" ItemsSource="{Binding Path=ExecuteValueList, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Stretch" GotFocus="ComboBox_ExecuteGotFocus" LostFocus="ComboBox_ExecuteLostFocus" TextBoxBase.TextChanged="ComboBox_ExecuteTextChanged">
                                                        <ComboBox.Style>
                                                            <Style TargetType="ComboBox">
                                                                <EventSetter Event="SelectionChanged" Handler="ExecuteChanged" />
                                                                <Setter Property="ItemContainerStyle" Value="{StaticResource ExecuteColumnStyle}" />
                                                            </Style>
                                                        </ComboBox.Style>
                                                    </ComboBox>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTextColumn x:Name="TestDisplayName" Binding="{Binding file}" CanUserSort="False" CanUserReorder="False" CanUserResize="True" HeaderStyle="{StaticResource DataGridColumnHeaderStyleTestQueue}" IsReadOnly="True"
                                        Width="*">
                                            <DataGridTextColumn.HeaderTemplate>
                                                <DataTemplate>
                                                    <DockPanel>
                                                        <TextBlock x:Name="txtDisplayNameHeader" Loaded="txtDisplayNameHeader_Loaded"  Text="File Name" />
                                                        <Button Name="btnDisplayName" HorizontalAlignment="Right" Margin="5,0,5,0" Width="20" Height="15" Content="&#9660;" ContextMenu="{StaticResource ctxDisplayName}" ContextMenuService.IsEnabled="false" FontSize="8" Click="ShowDisplayNameContextMenu" ToolTip="Choose display type"/>
                                                    </DockPanel>
                                                </DataTemplate>
                                            </DataGridTextColumn.HeaderTemplate>
                                            <DataGridTextColumn.ElementStyle>
                                                <Style>
                                                    <Setter Property="ToolTipService.ToolTip" Value="{Binding file}" />
                                                    <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                                </Style>
                                            </DataGridTextColumn.ElementStyle>
                                        </DataGridTextColumn>
                                        <DataGridTemplateColumn CanUserSort="False" CanUserReorder="False" CanUserResize="True" Header="Instance" HeaderStyle="{StaticResource DataGridColumnHeaderStyle1}" IsReadOnly="False" Width="50">
                                            <DataGridTemplateColumn.CellStyle>
                                                <Style>
                                                    <Setter Property="ToolTipService.ToolTip" Value="{Binding instanceRange}" />
                                                    <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                                </Style>
                                            </DataGridTemplateColumn.CellStyle>
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding instance}" Background="White" Foreground="Black"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding instance}" LostFocus="TextBox_InstanceLostFocus" GotFocus="TextBox_InstanceGotFocus"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTextColumn Binding="{Binding description}" CanUserSort="False" CanUserReorder="False" CanUserResize="True" Header="Description" HeaderStyle="{StaticResource DataGridColumnHeaderStyle6}" IsReadOnly="True" Width="250">
                                            <DataGridTextColumn.ElementStyle>
                                                <Style>
                                                    <Setter Property="ToolTipService.ToolTip" Value="{Binding description, Converter={StaticResource truncatestring}}" />
                                                    <Setter Property="ToolTipService.IsEnabled" Value="{Binding description, Converter={StaticResource stringhasvaluetobool}}" />
                                                    <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                                </Style>
                                            </DataGridTextColumn.ElementStyle>
                                        </DataGridTextColumn>
                                        <DataGridTemplateColumn x:Name="TestEnvironmentColumn" CanUserSort="False" CanUserReorder="False" CanUserResize="True" Header="Environment" HeaderStyle="{StaticResource DataGridColumnHeaderStyleTestQueue}" Width="100">
                                            <DataGridTemplateColumn.HeaderTemplate>
                                                <DataTemplate>
                                                    <DockPanel>
                                                        <TextBlock Text="Environment"/>
                                                        <Button Name="btnApplyEnvironment" HorizontalAlignment="Right" Margin="5,0,10,0" Width="20" Height="15" Content="&#9660;" ContextMenu="{StaticResource ctxEnvironment}" ContextMenuService.IsEnabled="false" FontSize="8" Click="ShowEnvironmentContextMenu" ToolTip="Apply to all"/>
                                                    </DockPanel>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.HeaderTemplate>
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate x:Name="TestEnvironmentDataTemplate">
                                                    <ComboBox IsEditable="True" IsEnabled="{Binding keepopenfieldsenabled, Mode=TwoWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Text="{Binding environment, Mode=TwoWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Path=EnvironmentIDs, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, UpdateSourceTrigger=PropertyChanged}" GotFocus="ComboBox_EnvironmentGotFocus" LostFocus="ComboBox_EnvironmentLostFocus" TextBoxBase.TextChanged="ComboBox_EnvironmentTextChanged" DropDownClosed="ComboBox_EnvironmentDropDownClosed" />
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn x:Name="TestBrowserColumn" CanUserSort="False" CanUserReorder="False" CanUserResize="True" Header="Browser" HeaderStyle="{StaticResource DataGridColumnHeaderStyleTestQueue}"  Width="80">
                                            <DataGridTemplateColumn.HeaderTemplate>
                                                <DataTemplate>
                                                    <DockPanel>
                                                        <TextBlock Text="Browser"/>
                                                        <Button Name="btnApplyBrowser"  HorizontalAlignment="Right" Margin="5,0,10,0" Width="20" Height="15" Content="&#9660;" ContextMenu="{StaticResource ctxBrowser}" ContextMenuService.IsEnabled="false" FontSize="8" Click="ShowBrowserContextMenu" ToolTip="Apply to all"/>
                                                    </DockPanel>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.HeaderTemplate>
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Browser.Name}">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding keepopenfieldsenabled}" Value="False">
                                                                    <Setter Property="Foreground" Value="Silver"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                    </TextBlock>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <ComboBox IsEnabled="{Binding keepopenfieldsenabled, Mode=TwoWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                                                              ItemsSource="{Binding AllBrowsers, RelativeSource={RelativeSource AncestorType={x:Type Window}}, UpdateSourceTrigger=PropertyChanged}"
                                                              SelectedItem="{Binding Browser, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" 
                                                              SelectedValue="{Binding Browser.Name, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                                                              SelectedValuePath="Name" GotFocus="ComboBox_BrowserGotFocus" SelectionChanged="ComboBox_BrowserSelectionChanged" DropDownClosed="ComboBoxBrowser_DropDownClosed">
                                                        <ComboBox.GroupStyle>
                                                            <GroupStyle>
                                                                <GroupStyle.HeaderTemplate>
                                                                    <DataTemplate >
                                                                        <TextBlock Text="{Binding Name}" FontWeight="ExtraBold" IsEnabled="False"/>
                                                                    </DataTemplate>
                                                                </GroupStyle.HeaderTemplate>
                                                            </GroupStyle>
                                                        </ComboBox.GroupStyle>
                                                        <ComboBox.ItemTemplate>
                                                            <DataTemplate>
                                                                <TextBlock Text="{Binding Name}"/>
                                                            </DataTemplate>
                                                        </ComboBox.ItemTemplate>
                                                    </ComboBox>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn CanUserSort="False" CanUserReorder="False" CanUserResize="True" HeaderStyle="{StaticResource DataGridColumnHeaderStyleTestQueue}" Width="100">
                                            <DataGridTemplateColumn.HeaderTemplate>
                                                <DataTemplate>
                                                    <DockPanel>
                                                        <TextBlock Text="Keep Open?"/>
                                                        <Button Name="btnIsOpen" HorizontalAlignment="Right" Margin="5,0,10,0" Width="20" Height="15" Content="&#9660;" ContextMenu="{StaticResource ctxIsOpen}" ContextMenuService.IsEnabled="false" FontSize="8" Click="ShowIsOpenContextMenu" ToolTip="Apply to all"/>
                                                    </DockPanel>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.HeaderTemplate>
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate x:Name="IsOpenDataTemplate">
                                                    <CheckBox HorizontalAlignment="Center" VerticalAlignment="Center" Click="KeepOpenCheckBoxClicked" IsChecked="{Binding keepopen, Mode=TwoWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource stringtobool}}"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>

                                        <!--<DataGridTextColumn Binding="{Binding executedsteps}"  CanUserSort="False" CanUserReorder="False" CanUserResize="True" Header="Completed" HeaderStyle="{StaticResource DataGridColumnHeaderStyle1}" IsReadOnly="True" Width="70">
                                            <DataGridTextColumn.ElementStyle>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="HorizontalAlignment" Value="Center" />
                                                </Style>
                                            </DataGridTextColumn.ElementStyle>
                                        </DataGridTextColumn>-->

                                        <!--<DataGridTextColumn Binding="{Binding duration}" CanUserSort="False" CanUserReorder="False" CanUserResize="True" Header="Duration" HeaderStyle="{StaticResource DataGridColumnHeaderStyle0}" Width="100" IsReadOnly="True"/>-->

                                        <!--<DataGridTextColumn Binding="{Binding executiondate}" CanUserSort="False" CanUserReorder="False" CanUserResize="False" Header="Execution Date" HeaderStyle="{StaticResource DataGridColumnHeaderStyle5}" Width="*" Visibility="Hidden"/>-->
                                    </DataGrid.Columns>
                                    <DataGrid.Resources>
                                        <!-- the non-editing cell -->
                                        <DataTemplate x:Key="ReadonlyCellTemplate">
                                            <TextBlock Text="{Binding browser}" />
                                        </DataTemplate>

                                        <!--the editing cell-->
                                        <DataTemplate x:Key="EditableCellTemplate">
                                            <TextBox Text="{Binding browser}" />
                                        </DataTemplate>


                                    </DataGrid.Resources>
                                </DataGrid>
                            </Grid>
                        </TabItem>
                    </TabControl>
                    <StackPanel Orientation="Horizontal" Grid.Row="2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,0,3">
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsBackgroundProcessInProgress, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="true">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <Button x:Name ="btnSave" Content="Save" Style="{StaticResource ButtonStyle2}" Click="btnSave_Click" />
                    </StackPanel>
                </Grid>
            </DockPanel>
        </DockPanel>

        <StatusBar Name="stsMain" HorizontalAlignment="Stretch" Height="Auto" Grid.Row="4" VerticalAlignment="Stretch" Width="Auto" Grid.ColumnSpan="3" Background="White" BorderThickness="0">
            <TextBlock Name="txtStatus" FontSize="11" Margin="5,0,0,0" Text="{Binding Path=StatusText, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"></TextBlock>
        </StatusBar>
    </Grid>
</Window>
