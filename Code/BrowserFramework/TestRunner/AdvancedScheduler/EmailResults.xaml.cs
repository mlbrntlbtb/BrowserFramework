using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Xml.Linq;
using CommonLib.DlkHandlers;
using CommonLib.DlkSystem;
using CommonLib.DlkUtility;
using TestRunner.Common;

namespace TestRunner.AdvancedScheduler
{
    /// <summary>
    /// Interaction logic for EmailResults.xaml
    /// </summary>
    public partial class EmailResults : Window
    {
        #region PRIVATE MEMBERS
        private const string STR_DEFAULT_SENDER = "AutomationBatch@deltek.com";
        private const string STR_ATTACHMENT_FILE = "summary.html";
        private string mSuiteResultsPath;
        private string mSuitePath;
        private string mDistributionList;
        #endregion

        #region PUBLIC METHODS
        /// <summary>
        /// Class constructor
        /// </summary>
        public EmailResults(string SuitePath, string SuiteResultPath, string DistributionList="")
        {
            mSuiteResultsPath = SuiteResultPath;
            mSuitePath = SuitePath;
            mDistributionList = DistributionList;
            InitializeComponent();
        }
        #endregion

        #region PRIVATE METHODS
        /// <summary>
        /// Gets default email subject to display
        /// </summary>
        /// <returns>Email autogenerated subject</returns>
        private string GetEmailSubject()
        {
            string ret = string.Empty;
            try
            {
                string productFolder = DlkTestRunnerCmdLib.GetProductFolder(mSuitePath);
                string product = DlkTestRunnerSettingsHandler.ApplicationList.Find(x => x.ProductFolder == productFolder).Name;

                ret = "[" + product + "] Test Suite: '" +
                    System.IO.Path.GetFileName(mSuitePath) + "' Results Notification";
            }
            catch
            {
                // swallow exception
            }
            return ret;
        }
        #endregion

        #region EVENT HANDLERS
        /// <summary>
        /// Click handler for Cancel button
        /// </summary>
        /// <param name="sender">Sender object</param>
        /// <param name="e">Event arguments</param>
        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                DialogResult = false;
            }
            catch (Exception ex)
            {
                DlkLogger.LogToFile(DlkUserMessages.ERR_UNEXPECTED_ERROR, ex);
            }
        }

        /// <summary>
        /// Click handler for Send object
        /// </summary>
        /// <param name="sender">Sender object</param>
        /// <param name="e">Event arguments</param>
        private void btnSend_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (!DlkString.IsValidEmailListFormat(txtRecipients.Text))
                {
                    DlkUserMessages.ShowError(DlkUserMessages.ERR_INVALID_EMAIL_LIST_FORMAT);
                    return;
                }

                List<string> recipients = new List<string>(txtRecipients.Text.Split(';').ToList().FindAll(x => DlkString.IsValidEmail(x)));

                if (!recipients.Any())
                {
                    DlkUserMessages.ShowError(DlkUserMessages.ERR_NO_VALID_RECIPIENTS);
                    return;
                }

                switch (DlkUserMessages.ShowQuestionYesNoCancel(this, DlkUserMessages.ASK_EDIT_EMAIL_MESSAGE))
                {
                    case MessageBoxResult.Yes: // Edit in default email client
                        DlkMAPI mpiObj = new DlkMAPI();
                        foreach (var recepient in recipients)
                        {
                            mpiObj.AddRecipientTo(recepient);
                        }
                        mpiObj.AddAttachment(System.IO.Path.Combine(mSuiteResultsPath, STR_ATTACHMENT_FILE));
                        /* If body is left blank, attachment is used as body */
                        string body = (bool)rdoSendAsAttachment.IsChecked ? DlkUserMessages.INF_SEE_ATTACHED_FILE : string.Empty;
                        mpiObj.SendMailPopup(txtSubject.Text, body);
                        break;
                    case MessageBoxResult.No: // Send without editing
                        MailMessage msg = new MailMessage();
                        msg.Subject = txtSubject.Text;
                        msg.From = new MailAddress(STR_DEFAULT_SENDER);
                        foreach (var recepient in recipients)
                        {
                            msg.To.Add(recepient);
                        }
                        if ((bool)rdoSendAsAttachment.IsChecked)
                        {
                            msg.Attachments.Add(new Attachment(System.IO.Path.Combine(mSuiteResultsPath, STR_ATTACHMENT_FILE)));
                            msg.Body = DlkUserMessages.INF_SEE_ATTACHED_FILE;
                        }
                        else
                        {
                            msg.Body = string.Empty;
                            msg.IsBodyHtml = true;
                            XDocument html = XDocument.Load(System.IO.Path.Combine(mSuiteResultsPath, STR_ATTACHMENT_FILE));
                            msg.Body = html.ToString();
                        }
                        SmtpClient client = new SmtpClient();
                        client.Port = int.Parse(DlkConfigHandler.GetConfigValue("smtpport"));
                        client.Host = DlkConfigHandler.GetConfigValue("smtphost");
                        client.DeliveryMethod = SmtpDeliveryMethod.Network;
                        client.Send(msg);
                        DlkUserMessages.ShowInfo(DlkUserMessages.INF_RESULTS_EMAIL_SENT);
                        break;
                    default: // cancel
                        return;
                }
                DialogResult = true;
            }
            catch (Exception ex)
            {
                DlkLogger.LogToFile(DlkUserMessages.ERR_UNEXPECTED_ERROR, ex);
            }
        }

        /// <summary>
        /// Loaded handler for Window
        /// </summary>
        /// <param name="sender">Sender object</param>
        /// <param name="e">Event arguments</param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                txtRecipients.Text = mDistributionList;
                txtSubject.Text = GetEmailSubject();
            }
            catch (Exception ex)
            {
                DlkLogger.LogToFile(DlkUserMessages.ERR_UNEXPECTED_ERROR, ex);
            }
        }
        #endregion
    }
}
